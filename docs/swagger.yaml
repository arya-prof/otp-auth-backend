basePath: /api/v1
definitions:
  models.AuthError:
    properties:
      code:
        type: string
      error:
        type: string
      message:
        type: string
    type: object
  models.Pagination:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  models.RateLimitError:
    properties:
      error:
        type: string
      message:
        type: string
      retry_after_seconds:
        type: integer
    type: object
  models.RequestOTPRequest:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  models.RequestOTPResponse:
    properties:
      message:
        type: string
      phone:
        type: string
    type: object
  models.UserListResponse:
    properties:
      pagination:
        $ref: '#/definitions/models.Pagination'
      users:
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
    type: object
  models.UserResponse:
    properties:
      id:
        type: string
      phone:
        type: string
      registered_at:
        type: string
    type: object
  models.VerifyOTPRequest:
    properties:
      otp:
        type: string
      phone:
        type: string
    required:
    - otp
    - phone
    type: object
  models.VerifyOTPResponse:
    properties:
      access_token:
        type: string
      message:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A backend service for OTP-based authentication and user management
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: OTP Authentication Backend API
  version: "1.0"
paths:
  /auth/request-otp:
    post:
      consumes:
      - application/json
      description: Generate and send OTP to the specified phone number
      parameters:
      - description: Phone number
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RequestOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RequestOTPResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthError'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/models.RateLimitError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AuthError'
      summary: Request OTP for phone number
      tags:
      - auth
  /auth/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP code and either register new user or login existing
        user
      parameters:
      - description: Phone number and OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VerifyOTPResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AuthError'
      summary: Verify OTP and authenticate user
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users with optional search and sorting
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Search query for phone number
        in: query
        name: q
        type: string
      - description: Sort field:direction (e.g., registered_at:desc)
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AuthError'
      security:
      - BearerAuth: []
      summary: List users with pagination and search
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.AuthError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.AuthError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.AuthError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.AuthError'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
